Trabajo Práctico Nº 5: Bash scripting
 PARTE I
 1. Adivina el número: 
 import random

def main():
    numero_secreto = random.randint(1, 100)
    intento = 0

    while True:
        try:
            adivinanza = int(input("Adivina el número (1-100): "))
            intento += 1

            if adivinanza == numero_secreto:
                print(f"¡Correcto! Adivinaste en {intento} intentos.")
                break
            elif adivinanza < numero_secreto:
                print("Demasiado bajo. Intenta nuevamente.")
            else:
                print("Demasiado alto. Intenta nuevamente.")
        except ValueError:
            print("Ingresa un número válido.")

if __name__ == "__main__":
    main()
El código genera un número aleatorio entre 1 y 100 y permite al usuario adivinarlo. Deja pistas si el intento es demasiado alto o bajo. 

2. Piedra, Papel o Tijeras:
import random

def main():
    opciones = ["piedra", "papel", "tijeras"]
    computadora = random.choice(opciones)

    usuario = input("Elige piedra, papel o tijeras: ").lower()

    if usuario in opciones:
        if usuario == computadora:
            print(f"Empate. La computadora también eligió {usuario}.")
        elif (usuario == "piedra" and computadora == "tijeras") or \
             (usuario == "papel" and computadora == "piedra") or \
             (usuario == "tijeras" and computadora == "papel"):
            print(f"¡Ganaste! La computadora eligió {computadora}.")
        else:
            print(f"Perdiste. La computadora eligió {computadora}.")
    else:
        print("Opción no válida. Elige piedra, papel o tijeras.")

if __name__ == "__main__":
    main()
el código permite al usuario elegir entre piedra, papel o tijeras, y luego compara la elección del usuario con la de la computadora para determinar el ganador.

3. Calculadora Simple:
def main():
    try:
        num1 = float(input("Ingresa el primer número: "))
        num2 = float(input("Ingresa el segundo número: "))
        operacion = input("Elige la operación (+, -, *, /): ")

        if operacion == "+":
            resultado = num1 + num2
        elif operacion == "-":
            resultado = num1 - num2
        elif operacion == "*":
            resultado = num1 * num2
        elif operacion == "/":
            resultado = num1 / num2
        else:
            print("Operación no válida. Elige +, -, *, o /.")
            return

        print(f"Resultado: {resultado}")
    except ValueError:
        print("Ingresa números válidos.")

if __name__ == "__main__":
    main()
    el código solicita al usuario dos números y la operación deseada (suma, resta, multiplicación o división). Luego muestra el resultado.

  4. Contador de Palabras:
  def contar_palabras_archivo(nombre_archivo):
    try:
        with open(nombre_archivo, 'r') as archivo:
            contenido = archivo.read()
            palabras = contenido.split()
            num_palabras = len(palabras)
            return num_palabras
    except FileNotFoundError:
        return "Archivo no encontrado."
import time

def cronometro():
    inicio = None
    tiempo_transcurrido = 0

    while True:
        accion = input("Presiona 'i' para iniciar, 'd' para detener o 'r' para reiniciar: ")

        if accion == 'i':
            if inicio is None:
                inicio = time.time()
                print("Cronómetro iniciado.")
            else:
                print("El cronómetro ya está en marcha.")
        elif accion == 'd':
            if inicio is not None:
                fin = time.time()
                tiempo_transcurrido += fin - inicio
                inicio = None
                print(f"Tiempo transcurrido: {int(tiempo_transcurrido)} segundos.")
            else:
                print("El cronómetro no está en marcha.")
        elif accion == 'r':
            inicio = None
            tiempo_transcurrido = 0
            print("Cronómetro reiniciado.")
        else:
            print("Acción no válida. Presiona 'i', 'd' o 'r'.")

if __name__ == "__main__":
    cronometro()
el código permite al usuario iniciar, detener y reiniciar el cronómetro, mostrando el tiempo transcurrido en segundos.
archivo = "mi_archivo.txt"
resultado = contar_palabras_archivo(archivo)
print(f"Número de palabras en '{archivo}': {resultado}")
se reemplaza "mi_archivo.txt" con la ruta de tu archivo de texto.

5. Cronómetro:
import time

class Cronometro:
    def __init__(self):
        self.tiempo_inicio = None
        self.tiempo_final = None
        self.tiempo_transcurrido = 0
        self.en_ejecucion = False

    def iniciar(self):
        if not self.en_ejecucion:
            self.tiempo_inicio = time.time() - self.tiempo_transcurrido
            self.en_ejecucion = True
            print("Cronómetro iniciado.")
        else:
            print("El cronómetro ya está en marcha.")

    def detener(self):
        if self.en_ejecucion:
            self.tiempo_final = time.time()
            self.tiempo_transcurrido = self.tiempo_final - self.tiempo_inicio
            self.en_ejecucion = False
            print(f"Cronómetro detenido. Tiempo transcurrido: {self.tiempo_transcurrido:.2f} segundos.")
        else:
            print("El cronómetro no está en marcha.")

    def reiniciar(self):
        self.tiempo_inicio = None
        self.tiempo_final = None
        self.tiempo_transcurrido = 0
        self.en_ejecucion = False
        print("Cronómetro reiniciado.")

    def mostrar_tiempo(self):
        if self.en_ejecucion:
            tiempo_actual = time.time()
            tiempo_actual_transcurrido = tiempo_actual - self.tiempo_inicio
            print(f"Tiempo transcurrido: {tiempo_actual_transcurrido:.2f} segundos.")
        else:
            print(f"Tiempo transcurrido: {self.tiempo_transcurrido:.2f} segundos.")

# Ejemplo de uso del cronómetro
cronometro = Cronometro()

# Simulación de uso
cronometro.iniciar()
time.sleep(2)  # Simula que el cronómetro está corriendo por 2 segundos
cronometro.mostrar_tiempo()
time.sleep(1)  # Simula que el cronómetro está corriendo por 1 segundo más
cronometro.detener()
cronometro.mostrar_tiempo()
cronometro.reiniciar()
cronometro.mostrar_tiempo()

parte 2

6. Usar la API de weatherapi.com para obtener el clima actual de una ciudad.
import requests

# Tu clave de API
api_key = 'TU_CLAVE_API'
# La ciudad que deseas consultar
city = 'Madrid'

# URL de la API
url = f'http://api.weatherapi.com/v1/current.json?key={api_key}&q={city}'

# Hacer la solicitud
response = requests.get(url)

# Verificar que la solicitud fue exitosa
if response.status_code == 200:
    # Convertir la respuesta a JSON
    weather_data = response.json()
    
    # Extraer y mostrar la información del clima
    current_weather = weather_data['current']
    print(f"Ciudad: {city}")
    print(f"Temperatura: {current_weather['temp_c']}°C")
    print(f"Condición: {current_weather['condition']['text']}")
    print(f"Humedad: {current_weather['humidity']}%")
    print(f"Viento: {current_weather['wind_kph']} km/h")
else:
    print("Error en la solicitud:", response.status_code)
7. Mostrar el género de un nombre ingresado por el usuario, usando la API del sitio
 https://api.agify.io/?name=nombre.
import requests

def obtener_genero(nombre):
    # URL de la API
    url = f'https://api.genderize.io/?name={nombre}'
    
    # Hacer la solicitud
    response = requests.get(url)
    
    # Verificar que la solicitud fue exitosa
    if response.status_code == 200:
        # Convertir la respuesta a JSON
        gender_data = response.json()
        
        # Extraer y mostrar la información del género
        nombre = gender_data['name']
        genero = gender_data['gender']
        probabilidad = gender_data['probability']
        count = gender_data['count']
        print(f"Nombre: {nombre}")
        print(f"Género: {genero}")
        print(f"Probabilidad: {probabilidad}")
        print(f"Recuento: {count}")
    else:
        print("Error en la solicitud:", response.status_code)

# Solicitar al usuario que ingrese un nombre
nombre_usuario = input("Ingrese un nombre: ")
obtener_genero(nombre_usuario)

8. Mostrar la edad probable de un nombre ingresado por el usuario, usando la API del
 sitio https://api.genderize.io/?name=nombre

 import requests

def obtener_edad_probable(nombre):
    # URL de la API
    url = f'https://api.agify.io/?name={nombre}'
    
    # Hacer la solicitud
    response = requests.get(url)
    
    # Verificar que la solicitud fue exitosa
    if response.status_code == 200:
        # Convertir la respuesta a JSON
        age_data = response.json()
        
        # Extraer y mostrar la información de la edad probable
        nombre = age_data['name']
        edad = age_data['age']
        count = age_data['count']
        print(f"Nombre: {nombre}")
        print(f"Edad probable: {edad}")
        print(f"Recuento: {count}")
    else:
        print("Error en la solicitud:", response.status_code)

# Solicitar al usuario que ingrese un nombre
nombre_usuario = input("Ingrese un nombre: ")
obtener_edad_probable(nombre_usuario)
